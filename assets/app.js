// WaterSense front-end (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏°‡∏ä‡∏•‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á)

const REFRESH_MS = 5000;          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
const ALERT_LEVEL = 1.20;         // ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÄ‡∏°‡∏ï‡∏£)

const state = {
  stations: [],
  lastUpdated: null,
  alerts24h: [],
  series: []
};

// ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏°‡∏ä‡∏•‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô
async function loadStations() {
  try {
    // üîó ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö API ‡∏à‡∏£‡∏¥‡∏á
    const res = await fetch("https://hydro.rid.go.th/api/stations");
    const stations = await res.json();

    state.stations = stations.map(s => ({
      id: s.StationID,
      name: s.StationName,
      level: +s.WaterLevel || 0,
      prev: +s.WaterLevel || 0,
      status: "ok",
      online: true,
      lat: s.Latitude,
      lng: s.Longitude
    }));

    state.series = state.stations.map(s => ({
      id: s.id,
      name: s.name,
      values: []
    }));

    tick(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á
  } catch (err) {
    console.error("‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
    alert("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏°‡∏ä‡∏•‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  }
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏∏‡∏Å REFRESH_MS
async function tick() {
  try {
    const res = await fetch("https://hydro.rid.go.th/api/latest");
    const liveData = await res.json();

    let newAlerts = [];
    state.stations.forEach(s => {
      const d = liveData.find(x => x.StationID === s.id);
      if (!d) return;

      s.prev = s.level;
      s.level = +d.WaterLevel || 0;
      s.online = true;

      let status = "ok";
      if (s.level >= ALERT_LEVEL) status = "alert";
      else if ((s.level - s.prev) >= 0.15) status = "watch";
      s.status = status;

      if (status !== "ok") {
        newAlerts.push({
          ts: new Date(d.Datetime),
          id: s.id,
          name: s.name,
          kind: status,
          level: s.level,
          delta: +(s.level - s.prev).toFixed(2)
        });
      }
    });

    state.alerts24h = [...newAlerts, ...state.alerts24h].slice(0, 200);
    state.lastUpdated = new Date();

    // ‡πÄ‡∏Å‡πá‡∏ö series ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
    state.series.forEach(ser => {
      const st = state.stations.find(x => x.id === ser.id);
      if (!st) return;
      ser.values.push({ t: state.lastUpdated, v: st.level, status: st.status });
      if (ser.values.length > 60) ser.values.shift();
    });

    renderStats();
    renderMap();
    renderAlerts();
    renderTrend();
  } catch (err) {
    console.error("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
  }

  setTimeout(tick, REFRESH_MS);
}

// ---------------- Renderers ‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ ----------------
// (renderStats, renderMap, renderAlerts, renderTrend ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô)
// -----------------------------------------------------

loadStations();
